const AppError = require('./../utils/appError');

const handleCastErrorDB = (err) => {
  // This 'kind' is the error that automatically generated by "Mongoose" in case that it's not able to convert recieved id, cause it's a wrong one, it may appeaer as "error.name === 'CastError'" in developer mode.
  const message = `Invalid ${err.path}: ${err.value}`;
  return new AppError(message, 400); // 400 stands for bad requist.
};

const handleDuplicateFieldsDB = (err, res) => {
  // This 'code' is the error that automatically generated by "Mongoose" in case that it's not able to convert recieved id, cause it maybe wrong one.
  const message = `Duplicate field value: '${err.keyValue.name}' Please use another one!`;
  return new AppError(message, 400);
};

const handleValidatoinErrorDB = (err) => {
  const errors = Object.values(err.errors).map((el) => el.message);
  const message = `Invalid input data. ${errors.join(', ')}`;

  return new AppError(message, 400);
};

const handleJWTError = () =>
  new AppError('Invalid token, Please log in again!', 401);

const handleJWTExpiredError = () =>
  new AppError('Your token has expired, Please log in again!', 401);

const sendErrorDev = (err, req, res) => {
  if(req.originalURL.startsWith('/api')) {
    // A) API
    return res.status(err.statusCode).json({
      error: err,
      status: err.status,
      message: err.message,
      stack: err.stack,
    });
  }
    // B) Website
    console.error('Error ðŸ’¥', err);
    return res.status(err.statusCode).json({message: err.message});
};

const sendErrorProd = (err, req, res) => {
  if (err.isOperational) {
    // Operational, trusted error: Send message to the client, and this error that we are handled.
    res.status(err.statusCode).json({
      status: err.status,
      message: err.message,
    });
  } else {
    // Programming or other unknown error: Don't leak error details.
    // 1) Log error.
    console.error('Error ðŸ’¥', err);

    // 2) Send generic message.
    res.status(500).json({
      status: 'error',
      message: 'Something went very wrong!',
    });
  }
};

// This is the error handling MW.
module.exports = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500; // 500 means internal server error.
  err.status = err.status || 'error';

  if (process.env.NODE_ENV === 'development') {
    sendErrorDev(err, req, res);
  } /*else if (process.env.NODE_ENV === 'production')*/ else {
    let error = { ...err }; // We have defined this hard copy to not change this function argument (err).
    error.message = err.message;

    if (error.kind === 'ObjectId') error = handleCastErrorDB(error);
    if (error.code === 11000) error = handleDuplicateFieldsDB(error);
    if (error.errors) error = handleValidatoinErrorDB(error);
    if (error.name === 'JsonWebTokenError') error = handleJWTError();
    if (error.name === 'TokenExpiredError') error = handleJWTExpiredError();

    sendErrorProd(error, req, res);
  }
};
